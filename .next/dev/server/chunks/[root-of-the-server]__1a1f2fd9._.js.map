{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aryan/Desktop/New%20folder%20%283%29/PDF-GPT-1/lib/s3-server.ts"],"sourcesContent":["import { S3 } from 'aws-sdk'\r\nimport { PDFLoader } from \"@langchain/community/document_loaders/fs/pdf\";\r\n\r\n\r\nconst streamToBuffer = async (readableStream: any): Promise<Buffer> => {\r\n  const chunks: Buffer[] = [];\r\n  for await (const chunk of readableStream) {\r\n    chunks.push(Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk));\r\n  }\r\n  return Buffer.concat(chunks);\r\n};\r\nexport async function downloadFromS3AndParse(fileKey: string) {\r\n  const s3 = new S3({\r\n    accessKeyId: process.env.NEXT_PUBLIC_OCI_ACCESS_KEY_ID!,\r\n    secretAccessKey: process.env.NEXT_PUBLIC_OCI_SECRET_ACCESS_KEY!,\r\n    endpoint: process.env.NEXT_PUBLIC_OCI_ENDPOINT!,\r\n    s3ForcePathStyle: true,\r\n    signatureVersion: 'v4',\r\n    region: process.env.NEXT_PUBLIC_OCI_REGION!,\r\n  })\r\n\r\n  const obj = await s3\r\n    .getObject({\r\n      Bucket: process.env.NEXT_PUBLIC_OCI_BUCKET_NAME!,\r\n      Key: fileKey,\r\n    })\r\n    .promise()\r\n  if (!obj.Body) {\r\n    throw new Error(\"File not found or empty in S3.\");\r\n  }\r\n\r\n  const fileBuffer =\r\n    obj.Body instanceof Buffer ? obj.Body : await streamToBuffer(obj.Body);\r\n\r\n  // âœ… Use LangChain PDFLoader directly on buffer\r\n  const loader = new PDFLoader(new Blob([fileBuffer]), {\r\n    splitPages: true\r\n  });\r\n\r\n  const docs = await loader.load();\r\n\r\n  return docs;\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,iBAAiB,OAAO;IAC5B,MAAM,SAAmB,EAAE;IAC3B,WAAW,MAAM,SAAS,eAAgB;QACxC,OAAO,IAAI,CAAC,OAAO,QAAQ,CAAC,SAAS,QAAQ,OAAO,IAAI,CAAC;IAC3D;IACA,OAAO,OAAO,MAAM,CAAC;AACvB;AACO,eAAe,uBAAuB,OAAe;IAC1D,MAAM,KAAK,IAAI,0MAAE,CAAC;QAChB,WAAW;QACX,eAAe;QACf,QAAQ;QACR,kBAAkB;QAClB,kBAAkB;QAClB,MAAM;IACR;IAEA,MAAM,MAAM,MAAM,GACf,SAAS,CAAC;QACT,MAAM;QACN,KAAK;IACP,GACC,OAAO;IACV,IAAI,CAAC,IAAI,IAAI,EAAE;QACb,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,aACJ,IAAI,IAAI,YAAY,SAAS,IAAI,IAAI,GAAG,MAAM,eAAe,IAAI,IAAI;IAEvE,+CAA+C;IAC/C,MAAM,SAAS,IAAI,0SAAS,CAAC,IAAI,KAAK;QAAC;KAAW,GAAG;QACnD,YAAY;IACd;IAEA,MAAM,OAAO,MAAM,OAAO,IAAI;IAE9B,OAAO;AACT","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aryan/Desktop/New%20folder%20%283%29/PDF-GPT-1/lib/embeddings.ts"],"sourcesContent":["import { GoogleGenAI } from '@google/genai';\r\n\r\n\r\nconst genAI = new GoogleGenAI({\r\n  apiKey: process.env.GOOGLE_API_KEY!,\r\n});\r\n\r\n\r\nexport async function getEmbeddings(text: string) {\r\n  try {\r\n    const response = await genAI.models.embedContent({\r\n      model: 'gemini-embedding-001',\r\n      contents: text.replace(/\\n/g, ' '),\r\n    })\r\n\r\n    return response.embeddings\r\n  } catch (error) {\r\n    console.log('Error calling Google GenAI', error)\r\n    throw error\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;AAGA,MAAM,QAAQ,IAAI,2OAAW,CAAC;IAC5B,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAGO,eAAe,cAAc,IAAY;IAC9C,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,MAAM,CAAC,YAAY,CAAC;YAC/C,OAAO;YACP,UAAU,KAAK,OAAO,CAAC,OAAO;QAChC;QAEA,OAAO,SAAS,UAAU;IAC5B,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,8BAA8B;QAC1C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aryan/Desktop/New%20folder%20%283%29/PDF-GPT-1/db/index.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless'\r\nimport { drizzle } from 'drizzle-orm/neon-http'\r\n\r\nconst sql = neon(process.env.DATABASE_URL!)\r\nexport const db = drizzle(sql)"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,MAAM,IAAA,yOAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;AAClC,MAAM,KAAK,IAAA,8QAAO,EAAC","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aryan/Desktop/New%20folder%20%283%29/PDF-GPT-1/db/schema.ts"],"sourcesContent":["import {\r\n  integer,\r\n  pgEnum,\r\n  pgTable,\r\n  serial,\r\n  text,\r\n  timestamp,\r\n  varchar,\r\n  vector,\r\n} from 'drizzle-orm/pg-core'\r\n\r\nexport const userSystemEnum = pgEnum('user_system_enum', ['system', 'user'])\r\n\r\nexport const chats = pgTable('chats', {\r\n  id: serial('id').primaryKey(),\r\n  pdfName: text('pdf_name').notNull(),\r\n  pdfUrl: text('pdf_url').notNull(),\r\n  createdAt: timestamp('created_at').notNull().defaultNow(),\r\n  userId: varchar('user_id', { length: 256 }).notNull(),\r\n  fileKey: text('file_key').notNull(),\r\n})\r\n\r\nexport type DrizzleChat = typeof chats.$inferSelect\r\n\r\nexport const messages = pgTable('messages', {\r\n  id: serial('id').primaryKey(),\r\n  chatId: integer('chat_id')\r\n    .references(() => chats.id)\r\n    .notNull(),\r\n  content: text('content').notNull(),\r\n  createdAt: timestamp('created_at').notNull().defaultNow(),\r\n  role: userSystemEnum('role').notNull(),\r\n})\r\n\r\nexport const documents = pgTable('documents', {\r\n  id: serial('id').primaryKey(),\r\n  chatId: integer('chat_id').notNull()\r\n    .references(() => chats.id),\r\n  content: text('content').notNull(),\r\n  embedding: vector('embedding', { dimensions: 3072 }).notNull(),\r\n})"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWO,MAAM,iBAAiB,IAAA,oRAAM,EAAC,oBAAoB;IAAC;IAAU;CAAO;AAEpE,MAAM,QAAQ,IAAA,2QAAO,EAAC,SAAS;IACpC,IAAI,IAAA,sRAAM,EAAC,MAAM,UAAU;IAC3B,SAAS,IAAA,kRAAI,EAAC,YAAY,OAAO;IACjC,QAAQ,IAAA,kRAAI,EAAC,WAAW,OAAO;IAC/B,WAAW,IAAA,4RAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,QAAQ,IAAA,wRAAO,EAAC,WAAW;QAAE,QAAQ;IAAI,GAAG,OAAO;IACnD,SAAS,IAAA,kRAAI,EAAC,YAAY,OAAO;AACnC;AAIO,MAAM,WAAW,IAAA,2QAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,sRAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,wRAAO,EAAC,WACb,UAAU,CAAC,IAAM,MAAM,EAAE,EACzB,OAAO;IACV,SAAS,IAAA,kRAAI,EAAC,WAAW,OAAO;IAChC,WAAW,IAAA,4RAAS,EAAC,cAAc,OAAO,GAAG,UAAU;IACvD,MAAM,eAAe,QAAQ,OAAO;AACtC;AAEO,MAAM,YAAY,IAAA,2QAAO,EAAC,aAAa;IAC5C,IAAI,IAAA,sRAAM,EAAC,MAAM,UAAU;IAC3B,QAAQ,IAAA,wRAAO,EAAC,WAAW,OAAO,GAC/B,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5B,SAAS,IAAA,kRAAI,EAAC,WAAW,OAAO;IAChC,WAAW,IAAA,0SAAM,EAAC,aAAa;QAAE,YAAY;IAAK,GAAG,OAAO;AAC9D","debugId":null}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aryan/Desktop/New%20folder%20%283%29/PDF-GPT-1/lib/vectors.ts"],"sourcesContent":["import { downloadFromS3AndParse } from './s3-server'\r\nimport { getEmbeddings } from './embeddings'\r\n\r\n\r\nimport { db } from '@/db'\r\nimport { documents } from '@/db/schema'\r\n\r\nasync function loadS3IntoVectorDB(fileKey: string, chatId: number) {\r\n\r\n  console.log('Downloading S3 object to file system...')\r\n  const document = await downloadFromS3AndParse(fileKey)\r\n\r\n  if (!document) throw new Error('Cannot download from S3')\r\n  console.log('PDF downloaded successfully!');\r\n  const vectors = [];\r\n  for (let i = 0; i < document.length; i++) {\r\n    const doc = document[i];\r\n    try {\r\n      const embeddings = await getEmbeddings(doc.pageContent)\r\n      const vectorValues = embeddings?.length && embeddings[0]?.values ? embeddings[0].values : [];\r\n      vectors.push({\r\n        values: vectorValues,\r\n        metadata: {\r\n          fileKey: fileKey,\r\n          pageNumber: doc.metadata.pageNumber as number,\r\n          text: doc.pageContent as string,\r\n        },\r\n      })\r\n    } catch (error) {\r\n      console.log('Error embedding documents', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  await db.insert(documents).values(vectors.map((vector) => ({\r\n    chatId,\r\n    content: vector.metadata.text,\r\n    embedding: vector.values,\r\n  })))\r\n}\r\n\r\n\r\n\r\nexport { loadS3IntoVectorDB }"],"names":[],"mappings":";;;;AAAA;AACA;AAGA;AACA;;;;;AAEA,eAAe,mBAAmB,OAAe,EAAE,MAAc;IAE/D,QAAQ,GAAG,CAAC;IACZ,MAAM,WAAW,MAAM,IAAA,+IAAsB,EAAC;IAE9C,IAAI,CAAC,UAAU,MAAM,IAAI,MAAM;IAC/B,QAAQ,GAAG,CAAC;IACZ,MAAM,UAAU,EAAE;IAClB,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;QACxC,MAAM,MAAM,QAAQ,CAAC,EAAE;QACvB,IAAI;YACF,MAAM,aAAa,MAAM,IAAA,oIAAa,EAAC,IAAI,WAAW;YACtD,MAAM,eAAe,YAAY,UAAU,UAAU,CAAC,EAAE,EAAE,SAAS,UAAU,CAAC,EAAE,CAAC,MAAM,GAAG,EAAE;YAC5F,QAAQ,IAAI,CAAC;gBACX,QAAQ;gBACR,UAAU;oBACR,SAAS;oBACT,YAAY,IAAI,QAAQ,CAAC,UAAU;oBACnC,MAAM,IAAI,WAAW;gBACvB;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,GAAG,CAAC,6BAA6B;YACzC,MAAM;QACR;IACF;IAEA,MAAM,mHAAE,CAAC,MAAM,CAAC,2HAAS,EAAE,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,SAAW,CAAC;YACzD;YACA,SAAS,OAAO,QAAQ,CAAC,IAAI;YAC7B,WAAW,OAAO,MAAM;QAC1B,CAAC;AACH","debugId":null}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aryan/Desktop/New%20folder%20%283%29/PDF-GPT-1/app/api/create-chat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\r\nimport { loadS3IntoVectorDB } from '@/lib/vectors'\r\nimport { db } from '@/db'\r\nimport { chats } from '@/db/schema'\r\nimport { auth } from '@clerk/nextjs/server'\r\nimport { z } from 'zod'\r\n\r\nconst postBodySchema = z.object({\r\n  fileKey: z.string(),\r\n})\r\n\r\n\r\n\r\nexport async function POST(request: NextRequest) {\r\n  const { userId } = await auth()\r\n  if (!userId) {\r\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\r\n  }\r\n\r\n  try {\r\n    const postBody = await request.json()\r\n    console.log(postBody)\r\n    const validation = postBodySchema.safeParse(postBody)\r\n\r\n    if (!validation.success) {\r\n      return NextResponse.json(\r\n        { error: validation.error },\r\n        { status: 400 }\r\n      )\r\n    }\r\n    console.log(postBody);\r\n    const { fileKey } = validation.data\r\n\r\n    // Clean the fileKey and construct the URL properly\r\n    const cleanFileKey = fileKey.replace('uploads/', '')\r\n    const endpoint = process.env.NEXT_PUBLIC_OCI_ENDPOINT!\r\n    const bucketName = process.env.NEXT_PUBLIC_OCI_BUCKET_NAME!\r\n    const pdfUrl = `${endpoint}/${bucketName}/${cleanFileKey}`;\r\n    console.log('Inserting with values:', {\r\n      fileKey,\r\n      pdfName: fileKey,\r\n      pdfUrl,\r\n      userId\r\n    });\r\n    const returns = await db\r\n      .insert(chats)\r\n      .values({\r\n        fileKey: fileKey,\r\n        pdfName: fileKey, // or extract actual filename if needed\r\n        pdfUrl: pdfUrl,\r\n        userId: userId,\r\n      })\r\n      .returning({\r\n        insertedId: chats.id,\r\n      })\r\n    await loadS3IntoVectorDB(fileKey, returns[0].insertedId)\r\n\r\n\r\n    console.log(\"returns\", returns);\r\n    return NextResponse.json({ error: false, chatId: returns[0].insertedId })\r\n  } catch (error) {\r\n    console.log(error)\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,MAAM,iBAAiB,2NAAC,CAAC,MAAM,CAAC;IAC9B,SAAS,2NAAC,CAAC,MAAM;AACnB;AAIO,eAAe,KAAK,OAAoB;IAC7C,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAA,uSAAI;IAC7B,IAAI,CAAC,QAAQ;QACX,OAAO,+PAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,IAAI;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,aAAa,eAAe,SAAS,CAAC;QAE5C,IAAI,CAAC,WAAW,OAAO,EAAE;YACvB,OAAO,+PAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,WAAW,KAAK;YAAC,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QACA,QAAQ,GAAG,CAAC;QACZ,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,IAAI;QAEnC,mDAAmD;QACnD,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;QACjD,MAAM;QACN,MAAM;QACN,MAAM,SAAS,GAAG,SAAS,CAAC,EAAE,WAAW,CAAC,EAAE,cAAc;QAC1D,QAAQ,GAAG,CAAC,0BAA0B;YACpC;YACA,SAAS;YACT;YACA;QACF;QACA,MAAM,UAAU,MAAM,mHAAE,CACrB,MAAM,CAAC,uHAAK,EACZ,MAAM,CAAC;YACN,SAAS;YACT,SAAS;YACT,QAAQ;YACR,QAAQ;QACV,GACC,SAAS,CAAC;YACT,YAAY,uHAAK,CAAC,EAAE;QACtB;QACF,MAAM,IAAA,sIAAkB,EAAC,SAAS,OAAO,CAAC,EAAE,CAAC,UAAU;QAGvD,QAAQ,GAAG,CAAC,WAAW;QACvB,OAAO,+PAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAO,QAAQ,OAAO,CAAC,EAAE,CAAC,UAAU;QAAC;IACzE,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,OAAO,+PAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}